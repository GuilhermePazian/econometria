BEAUTYxEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, ln(course_eval))) + theme_light()
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, ln(course_eval))) + theme_light()
TeachingRatings <- read.csv("TeachingRatings.csv", dec = ",")
ep_robusto_multiplo = function(X, n, k, resid){#em forma matricial
#obtendo sigma_hat_beta
a = solve((crossprod(X,X))/n)
i = 1
dim = dim((X[i,]%*%t(X[i,]))*resid[i]^2) #dimensao para a matriz nula
# inicializando vetor pra soma
soma=matrix(rep(0, dim[1]*dim[2]), nrow=dim[1], ncol=dim[2])
for(i in 1:n){
aux = (X[i,]%*%t(X[i,]))*resid[i]^2
soma = aux + soma
}
sigma_hat_v = (1/(n-k-1))*soma
sigma_hat_beta = (1/n)*(a%*%sigma_hat_v%*%a)
return(sigma_hat_beta)
}
F_robusto = function(sigma_hat_beta, R, r, beta_hat){
#R = qx(k+1), r = qx1, beta_hat tem que estar como vetor
A = (R%*%beta_hat)-r
B = R%*%sigma_hat_beta%*%t(R)
f = (t(A)%*%solve(B)%*%A)/dim(R)[1]
return(f)
}
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, course_eval)) + theme_light()
AGExEVAL <- ggplot(data = TeachingRatings) +
geom_point(aes(age, course_eval)) + theme_light()
grid.arrange(BEAUTYxEVAL,AGExEVAL, ncol = 2)
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, ln(course_eval))) + theme_light()
AGExEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(age, ln(course_eval))) + theme_light()
grid.arrange(BEAUTYxEVAL2,AGExEVAL2, ncol = 2)
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, log(course_eval))) + theme_light()
AGExEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(age, log(course_eval))) + theme_light()
grid.arrange(BEAUTYxEVAL2,AGExEVAL2, ncol = 2)
library(ggplot2)
library(gridExtra)
ggplot(data = TeachingRatings) +
geom_point(aes(log(age), log(course_eval))) + theme_light()
library(ggplot2)
library(gridExtra)
ggplot(data = TeachingRatings) +
geom_point(aes(log(age), course_eval)) + theme_light()
library(ggplot2)
library(gridExtra)
ggplot(data = TeachingRatings) +
geom_point(aes(log(age), log(course_eval))) + theme_light()
View(TeachingRatings)
cor(TeachingRatings)
lm(data = TeachingRatings, course_eval ~ beauty + female + minority + nnenglish + intro + onecredit + age)
lm(data = TeachingRatings, course_eval ~ beauty * female + minority + nnenglish + intro + onecredit + age)
TeachingRatings <- read.csv("TeachingRatings.csv", dec = ",")
ep_robusto_multiplo = function(X, n, k, resid){#em forma matricial
#obtendo sigma_hat_beta
a = solve((crossprod(X,X))/n)
i = 1
dim = dim((X[i,]%*%t(X[i,]))*resid[i]^2) #dimensao para a matriz nula
# inicializando vetor pra soma
soma=matrix(rep(0, dim[1]*dim[2]), nrow=dim[1], ncol=dim[2])
for(i in 1:n){
aux = (X[i,]%*%t(X[i,]))*resid[i]^2
soma = aux + soma
}
sigma_hat_v = (1/(n-k-1))*soma
sigma_hat_beta = (1/n)*(a%*%sigma_hat_v%*%a)
return(sigma_hat_beta)
}
#hipoteses H0: R beta = r vs H1: Rbeta ~= r
F_robusto = function(sigma_hat_beta, R, r, beta_hat){
#R = qx(k+1), r = qx1, beta_hat tem que estar como vetor
A = (R%*%beta_hat)-r
B = R%*%sigma_hat_beta%*%t(R)
f = (t(A)%*%solve(B)%*%A)/dim(R)[1]
return(f)
}
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, course_eval)) + theme_light()
AGExEVAL <- ggplot(data = TeachingRatings) +
geom_point(aes(age, course_eval)) + theme_light()
grid.arrange(BEAUTYxEVAL,AGExEVAL, ncol = 2)
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, log(course_eval))) + theme_light()
AGExEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(age, log(course_eval))) + theme_light()
grid.arrange(BEAUTYxEVAL2,AGExEVAL2, ncol = 2)
library(ggplot2)
library(gridExtra)
ggplot(data = TeachingRatings) +
geom_point(aes(log(age), course_eval)) + theme_light()
library(ggplot2)
library(gridExtra)
ggplot(data = TeachingRatings) +
geom_point(aes(log(age), log(course_eval))) + theme_light()
cor(TeachingRatings)
lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty + female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority + nnenglish + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + (beauty * female) + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + (beauty * female)^2 + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + beauty^2 * female + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + beauty^2 + female + beauty^2 : female + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + beauty^2  + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + onecredit)
summary(fit)
summary(fit)$r.squared
TeachingRatings$beauty2 <- TeachingRatings$beauty^2
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + beauty2  + onecredit)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age)
summary(fit)
summary(fit)$r.squared
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + onecredit)
summary(fit)
summary(fit)$r.squared
TeachingRatings$beauty2 <- TeachingRatings$beauty^2
fit <- lm(data = TeachingRatings, course_eval ~ beauty * female + beauty2 + beauty2:female + onecredit)
summary(fit)
summary(fit)$r.squared
fit
summary(fit)$resÃ­duals
fit$residuals
TeachingRatings$beauty2 <- TeachingRatings$beauty^2
library(AER)
install.packages(AER)
install.packages("AER")
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = TeachingRatings[,-6], n = ncol(TeachingRatings), k = 8, fit$residuals)
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit$residuals))
vcovHC(fit0, type = "HC1")
TeachingRatings$beauty2 <- TeachingRatings$beauty^2
fit1 <- lm(data = TeachingRatings, course_eval ~ beauty * female + minority * nnenglish + minority:beauty + intro + onecredit + age + beauty2 + beauty:female)
epfit1 <-ep_robusto_multiplo(X, n, k, fit$residuals)
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit$residuals))
vcovHC(fit0, type = "HC1")
library(printr)
library(AER)
fit1 <- lm(course_eval~beauty,data = TeachingRatings)
robust.fit1 <- vcovHC(fit1, type = "HC1")
coeficientes.fit1 <-coeftest(fit1, robust.fit1)
coeficientes.fit1
r2x <- summary(fit1)$r.squared
r2ajustx <- summary(fit1)$adj.r.squared
TeachingRatings <- read.csv("TeachingRatings.csv", dec = ",")
ep_robusto_multiplo = function(X, n, k, resid){#em forma matricial
#obtendo sigma_hat_beta
a = solve((crossprod(X,X))/n)
i = 1
dim = dim((X[i,]%*%t(X[i,]))*resid[i]^2) #dimensao para a matriz nula
# inicializando vetor pra soma
soma=matrix(rep(0, dim[1]*dim[2]), nrow=dim[1], ncol=dim[2])
for(i in 1:n){
aux = (X[i,]%*%t(X[i,]))*resid[i]^2
soma = aux + soma
}
sigma_hat_v = (1/(n-k-1))*soma
sigma_hat_beta = (1/n)*(a%*%sigma_hat_v%*%a)
return(sigma_hat_beta)
}
#hipoteses H0: R beta = r vs H1: Rbeta ~= r
F_robusto = function(sigma_hat_beta, R, r, beta_hat){
#R = qx(k+1), r = qx1, beta_hat tem que estar como vetor
A = (R%*%beta_hat)-r
B = R%*%sigma_hat_beta%*%t(R)
f = (t(A)%*%solve(B)%*%A)/dim(R)[1]
return(f)
}
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, course_eval)) + theme_light()
AGExEVAL <- ggplot(data = TeachingRatings) +
geom_point(aes(age, course_eval)) + theme_light()
grid.arrange(BEAUTYxEVAL,AGExEVAL, ncol = 2)
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, course_eval)) + theme_light()
AGExEVAL <- ggplot(data = TeachingRatings) +
geom_point(aes(age, course_eval)) + theme_light()
grid.arrange(BEAUTYxEVAL,AGExEVAL, ncol = 2)
library(ggplot2)
library(gridExtra)
BEAUTYxEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(beauty, log(course_eval))) + theme_light()
AGExEVAL2 <- ggplot(data = TeachingRatings) +
geom_point(aes(age, log(course_eval))) + theme_light()
grid.arrange(BEAUTYxEVAL2,AGExEVAL2, ncol = 2)
library(ggplot2)
library(gridExtra)
ggplot(data = TeachingRatings) +
geom_point(aes(log(age), course_eval)) + theme_light()
library(ggplot2)
library(gridExtra)
ggplot(data = TeachingRatings) +
geom_point(aes(log(age), log(course_eval))) + theme_light()
cor(TeachingRatings)
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit$residuals))
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit0$residuals))
vcovHC(fit0, type = "HC1")
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit0$residuals))
vcovHC(fit0, type = "HC0")
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit0$residuals))
vcovHC(fit0, type = "HC2")
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit0$residuals))
vcovHC(fit0, type = "HC3")
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit0$residuals))
vcovHC(fit0, type = "HC4")
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit0$residuals))
vcovHC(fit0, type = "HC1")
library(AER)
fit0 <- lm(course_eval~ minority + age + female + onecredit + beauty +  intro + nnenglish, data = TeachingRatings)
ep_robusto_multiplo(X = as.matrix(TeachingRatings[,-6]), n = ncol(TeachingRatings), k = 8, as.matrix(fit0$residuals))
summary(vcovHC(fit0, type = "HC1"))
fit0
fit0$model
